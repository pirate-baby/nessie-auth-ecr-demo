package com.example;

import org.jose4j.jwk.HttpsJwks;
import org.jose4j.jwt.JwtClaims;
import org.jose4j.jwt.MalformedClaimException;
import org.jose4j.jwt.consumer.InvalidJwtException;
import org.jose4j.jwt.consumer.JwtConsumer;
import org.jose4j.jwt.consumer.JwtConsumerBuilder;
import org.jose4j.keys.resolvers.HttpsJwksVerificationKeyResolver;
import org.jose4j.jwt.consumer.ErrorCodeValidator;
import org.jose4j.jwt.consumer.JwtContext;
import org.jose4j.jwt.consumer.JwtValidationContext;
import org.jose4j.jwt.consumer.JwtValidationException;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.util.List;

public class JwtValidator {
    private static final Logger logger = Logger.getLogger(JwtValidator.class.getName());
    private final String clientId;
    private final String jwksUrl;
    private final String clientSecret;

    public JwtValidator(String clientId, String jwksUrl, String clientSecret) {
        this.clientId = clientId;
        this.jwksUrl = jwksUrl;
        this.clientSecret = clientSecret;
        logger.info("Initialized JwtValidator with:");
        logger.info("Client ID: " + clientId);
        logger.info("JWKS URL: " + jwksUrl);
        logger.info("Client Secret: [REDACTED]");
    }

    public JwtClaims validateToken(String token) throws InvalidJwtException, MalformedClaimException {
        logger.info("Starting token validation...");
        logger.info("Token: " + token);

        // Create a JWKS resolver that will fetch the keys from the JWKS endpoint
        logger.info("Creating JWKS resolver for URL: " + jwksUrl);
        HttpsJwks httpsJwks = new HttpsJwks(jwksUrl);
        HttpsJwksVerificationKeyResolver httpsJwksKeyResolver = new HttpsJwksVerificationKeyResolver(httpsJwks);
        logger.info("JWKS resolver created successfully");

        // Create a JWT consumer that will validate the token
        logger.info("Creating JWT consumer with validation rules:");
        logger.info("- Expected audience: " + clientId);
        logger.info("- Requiring expiration time");
        logger.info("- Requiring issued at time");

        JwtConsumer jwtConsumer = new JwtConsumerBuilder()
                .setVerificationKeyResolver(httpsJwksKeyResolver)
                .setExpectedAudience(clientId)  // Verify the audience claim
                .setRequireExpirationTime()     // Require expiration time
                .setRequireIssuedAt()           // Require issued at time
                .setSkipDefaultAudienceValidation() // We'll handle audience validation manually
                .build();
        logger.info("JWT consumer created successfully");

        try {
            // Process the token and validate it
            logger.info("Processing token...");
            JwtContext jwtContext = jwtConsumer.process(token);
            JwtClaims claims = jwtContext.getJwtClaims();

            // Manual audience validation
            List<String> audiences = claims.getAudience();
            logger.info("Token audiences: " + audiences);
            if (!audiences.contains(clientId)) {
                throw new InvalidJwtException("Token audience does not match expected client ID. Expected: " +
                    clientId + ", Found: " + audiences);
            }

            logger.info("Token processed successfully");
            logger.info("Claims: " + claims.toJson());

            return claims;
        } catch (InvalidJwtException e) {
            logger.severe("Token validation failed!");
            logger.severe("Error type: " + e.getClass().getName());
            logger.severe("Error message: " + e.getMessage());

            if (e.getCause() != null) {
                logger.severe("Caused by: " + e.getCause().getMessage());
            }

            if (e instanceof JwtValidationException) {
                JwtValidationException validationException = (JwtValidationException) e;
                List<ErrorCodeValidator.Error> errors = validationException.getErrorDetails();
                logger.severe("Validation errors:");
                for (ErrorCodeValidator.Error error : errors) {
                    logger.severe("- Error code: " + error.getErrorCode());
                    logger.severe("  Error message: " + error.getErrorMessage());
                }
            }

            throw e;
        }
    }

    public static void main(String[] args) {
        // Set logging level to ALL
        Logger.getLogger("").setLevel(Level.ALL);
        for (java.util.logging.Handler h : Logger.getLogger("").getHandlers()) {
            h.setLevel(Level.ALL);
        }

        if (args.length != 4) {
            logger.severe("Invalid number of arguments");
            logger.info("Usage: java com.example.JwtValidator <token> <clientId> <jwksUrl> <clientSecret>");
            System.exit(1);
        }

        String token = args[0];
        String clientId = args[1];
        String jwksUrl = args[2];
        String clientSecret = args[3];

        try {
            logger.info("Creating JwtValidator instance...");
            JwtValidator validator = new JwtValidator(clientId, jwksUrl, clientSecret);
            logger.info("Validating token...");
            JwtClaims claims = validator.validateToken(token);
            logger.info("Token is valid!");
            logger.info("Claims: " + claims.toJson());
        } catch (InvalidJwtException e) {
            logger.severe("Invalid JWT: " + e.getMessage());
            logger.severe("Exception details: " + e.toString());
            e.printStackTrace();
        } catch (MalformedClaimException e) {
            logger.severe("Malformed claim: " + e.getMessage());
            logger.severe("Exception details: " + e.toString());
            e.printStackTrace();
        } catch (Exception e) {
            logger.severe("Unexpected error: " + e.getMessage());
            logger.severe("Exception details: " + e.toString());
            e.printStackTrace();
        }
    }
}